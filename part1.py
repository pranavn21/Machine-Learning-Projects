# -*- coding: utf-8 -*-
"""part1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/104PFS-fr_KLjwKi0DXoT9qrjdN1iMYGv
"""

# Pranav Nair
# CS 4375.001

import pandas as pd
from math import pow
import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv("https://raw.githubusercontent.com/pranavn21/real-estate/main/Real%20estate%20valuation%20data%20set.csv")
df_part = df[["X2 house age", "Y house price of unit area"]]

df.head()

X = df_part["X2 house age"]
Y = df_part["Y house price of unit area"]
x_test = df.sample(frac=0.6,random_state=200)
x_test.reset_index()

# Continue from here

plt.scatter(X,Y)

def linearRegression(lr, iter): # takes in learning rate, num of iterations
  n = float(len(X))

  # Variables to find out
  m = 0 # slope
  c = 0 # y-int

  for i in range(iter):
    yPred = m*X + c
    dm = (-2/n)*sum(X*(Y-yPred))
    dc = (-2/n)*sum(Y-yPred) # Manipulation with respect to 2nd derivative
    MSE = (1/n)*sum((Y-yPred)**2) # Mean Square Error
    m =  m - lr*dm
    c = c - lr*dc

  print("m: " , m, "\nc: " , c, "\nMSE: ", MSE)
  plt.scatter(X,Y)
  plt.plot([min(X), max(X)],[min(yPred), max(yPred)], color="Red")
  plt.show()
  return m, c;

def predict(X, m, c):
  y = m*X+c
  return y

m, c = linearRegression(0.001, 1000)
y_pred = predict(x_test, m, c)

linearRegression(0.001, 10000)

linearRegression(0.0001, 10000)

linearRegression(0.0001, 1000)

linearRegression(0.001,100000)